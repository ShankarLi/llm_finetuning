name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY_URL: ghcr.io
  IMAGE_NAME: sentiment-analysis-api

jobs:
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'

    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install black flake8 safety bandit

    - name: Code formatting check
      run: black --check --line-length 88 .

    - name: Lint with flake8
      run: flake8 --max-line-length=88 --ignore=E203,W503

    - name: Security check
      run: |
        safety check
        bandit -r . -f json -o security-report.json || true

    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: security-report.json

  test-suite:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: code-quality
    
    strategy:
      matrix:
        python-version: ['3.9', '3.10']
    
    steps:
    - uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock

    - name: Download NLTK resources
      run: python -c "import nltk; nltk.download('stopwords'); nltk.download('wordnet'); nltk.download('punkt'); nltk.download('omw-1.4')"

    - name: Create test files (if not exist)
      run: |
        mkdir -p tests
        if [ ! -f tests/test_api.py ]; then
          cat > tests/test_api.py << 'EOF'
        import pytest
        from production_api import app

        @pytest.fixture
        def client():
            app.config['TESTING'] = True
            with app.test_client() as client:
                yield client

        def test_health_endpoint(client):
            response = client.get('/health')
            assert response.status_code == 200
            
        def test_api_info_endpoint(client):
            response = client.get('/api-info')
            assert response.status_code == 200
        EOF
        fi

    - name: Run tests
      run: pytest tests/ -v --cov=. --cov-report=xml --cov-report=html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests

  build-container:
    name: Build Container Image
    runs-on: ubuntu-latest
    needs: test-suite
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY_URL }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY_URL }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-container
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Deploy to staging environment
      run: |
        echo "Deploying to staging with image: ${{ needs.build-container.outputs.image-tag }}"
        # Add your staging deployment commands here

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-container
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Deploy to Cloud Run
      id: deploy
      uses: google-github-actions/deploy-cloudrun@v2
      with:
        service: sentiment-analysis-api
        image: ${{ needs.build-container.outputs.image-tag }}
        region: us-central1
        env_vars: |
          FLASK_ENV=production
          LOG_LEVEL=INFO

    - name: Show deployment URL
      run: echo "Deployed to ${{ steps.deploy.outputs.url }}"